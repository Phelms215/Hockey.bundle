import string
#import urlparse
#import teams


####################################################################################################
def MetadataObjectForURL(url):
	
	#parts = urlparse.urlparse(url)	
	#query = urlparse.parse_qs(parts.query)
	
	#title = query["t"][0]	
	#logo = query["l"][0]
	#desc = query["d"][0]
	
	Log.Info("Generate Hockey metadata for " + url)
	
	title = "Game Stream"
	desc = ""
	logo = R("TEAM_Default.jpg")

    # Construct a metadata item
	return VideoClipObject(
		title = title,
		thumb=R(logo),
		summary = desc
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		GetMediaObject(url, 4500, 1080, 120), # this is a lie, this stream is really 720 and 120 fps.  but plex only shows the resolution, so lets lie a bit and make it clearer for the user
		GetMediaObject(url, 3000, 720, 60),
		GetMediaObject(url, 1600, 540, 60),
		GetMediaObject(url, 1200, 432, 60),
		GetMediaObject(url, 800, 360, 60),
		GetMediaObject(url, 400, 224, 60)
	]
	
def GetMediaObject(url, quality, resolution, framerate):
	return MediaObject(
			optimized_for_streaming=True,
			parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url, quality=str(quality))))],
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			container = Container.MP4,
			bitrate = quality,
			video_resolution = resolution,
			video_frame_rate = framerate
		)


####################################################################################################
def PlayVideo(url, quality):
	
	Log.Debug("service PlayVideo: " + url + " q=" + quality)
	
	url = url.replace("{q}", quality)
	
	Log.Debug("Corrected URL: " + url)
	
	playlist = HTTP.Request(url, follow_redirects=False).content
	
	playlist_base = ""
	
	if string.find(url, "m3u8") > -1: # direct stream, needs base
		index = string.rfind(url, "/")
		playlist_base = url[0:index+1]

	return GeneratePlaylist(playlist, playlist_base)
	
def GeneratePlaylist(playlist, playlist_base):	

	Log.Debug("base: " + playlist_base)

	new_playlist = '#EXTM3U'
	for line in playlist.splitlines()[1:-2]:
		if line.startswith('#'):
			# take it as is
			Log.Debug("line: " + line)
			new_playlist = new_playlist + "\n" + line
		else:
			line = playlist_base + line
			Log.Debug("line: " + line)
			new_playlist = new_playlist + "\n" + line			

	return new_playlist
	